node {
   withCredentials([azureServicePrincipal(credentialsId: 'az',
                                    subscriptionIdVariable: 'subscription_id',
                                    clientIdVariable: 'client_id',
                                    clientSecretVariable: 'client_secret',
                                    tenantIdVariable: 'tenant_id')]) {
    sh 'az login --service-principal -u $client_id -p $client_secret -t $tenant_id'
}
  /*parameters {
    password (name: 'subscription_id')
    password (name: 'client_id')
    password (name: 'client_secret')
    password (name: 'tenant_id')
  }
  environment{
    AZURE_SUBSCRIPTION_ID = "${params.subscription_id}"
    AZURE_CLIENT_ID = "${params.client_id}"
    AZURE_TENANT_ID = "${params.tenant_id}"
    AZURE_CLIENT_SECRET = "${params.client_secret}"
}*/
  stage('SCM Checkout & cloning'){
    git url:  'https://github.com/gunjannn/c-i.git',branch: 'master'
}

  stage('Setterraformpath') {
   
    script {
      def tfHome = tool name: 'terraform'
      env.PATH = "${tfHome}:${env.PATH}"
 }
      sh 'terraform version'
 }
           
      
  stage('TerraformApply') {
    /*withCredentials([azureServicePrincipal('az')]) {*/
      sh "terraform init -input=false"
      sh "terraform validate"
   }
   stage ('TerraformPlan')
       withCredentials([azureServicePrincipal(credentialsId: 'az',
                                    subscriptionIdVariable: 'subscription_id',
                                    clientIdVariable: 'client_id',
                                    clientSecretVariable: 'client_secret',
                                    tenantIdVariable: 'tenant_id')]) {
      sh "terraform plan -var='client_id=$client_id' -var='subscription_id=$subscription_id' -var='client_secret=$client_secret' -var='tenant_id=$tenant_id' -out=tfplan -input=false"
      sh "terraform apply -input=false tfplan" 
  }
  stage('InfraTesting') {
    withCredentials([azureServicePrincipal('az')]) {
      sh "inspec exec docker.rb example.rb -t azure://"
}	
}
}









































/*node {
  stage('SCM Checkout & cloning'){
    git url:  'https://github.com/gunjannn/c-i.git',branch: 'master'
}

  stage('Setterraformpath') {
    script {
      def tfHome = tool name: 'terraform'
      env.PATH = "${tfHome}:${env.PATH}"
 }
      sh 'terraform version'
 }
            
      
  stage('TerraformApply') {

    sh "terraform init"
}
   
   stage('TerraformPlan') { 
      sh "terraform plan -out=tfplan -input=false"
}
      
  stage('changing dir') {
    dir ('c-i') {
    sh 'pwd'
}
}

  stage('TerraformApply') {
    sh "terraform apply -input=false tfplan"
}

  stage('InfraTesting') {
  withCredentials([azureServicePrincipal('az')]) {
   
    sh "inspec exec AKS -t azure://64b70538-bc40-4492-9c4b-13f8b43e732d"
}	
}
}*/

